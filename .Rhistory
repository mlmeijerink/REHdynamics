rm(list=ls())
data(edges)
data(attributes)
library(remdata)
?workplace2015
devtools::document()
?edges
head(attributes)
str(attributes)
devtools::document()
?attributes
usethis::use_data_raw("example_analyses")
head(edges)
# Prepare department covariate
attributes$depc <- as.numeric(factor(attributes$department))
covar <- attributes
# Model
model <- ~ 1 + same("depc", covar) + recencyContinue() +
inertia(scaling = "std") + sp(scaling = "std")
?MWrem
?dyneval
?ddwindows]
?ddwindows
data(edges)
tail(edges$time)
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_ddwindows.RData")
usethis::use_data(example_ddwindows, overwrite = TRUE)
head(example_ddwindows$windows)
str(example_ddwindows$windows)
devtools::document()
?example_ddwindows
example_ddwindows$options[[1]]
# How many have no result for the first option?
sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]))
# How many have no result for the first option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))
# How many have no result for the first option?
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))
# How many have no result for the second option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[2])))  # 80
# How many have no result for the second option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2])))  # 80
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2])))
# How many have no result for the third option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3])))  # 55
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3])))
# How many have no result for the third option?
sum(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4])
}))  # 42
plot(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4])
}))  # 24
sum(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4]) & is.na(x$logBF[5])
}))  # 24
plot(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4]) & is.na(x$logBF[5])
}))
length(example_ddwindows$options)
example_ddwindows$options[[349]]
example_ddwindows$options[[348]]
example_ddwindows$options[[347]]
example_ddwindows$options[[346]]
example_ddwindows$options[[345]]
example_ddwindows$options[[344]]
example_ddwindows$options[[343]]
example_ddwindows$options <- example_ddwindows$options[1:343]
tail(example_ddwindows$windows)
nrow(example_ddwindows$windows)
usethis::use_data(example_ddwindows, overwrite = TRUE)
# How many have no result for the first option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))  # 80
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))
# How many have no result for the second option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2])))  # 55
# How many have no result for the second option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2])))  # 49
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2])))
# How many have no result for the third option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3])))  # 42
# How many have no result for the third option?
sum(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3])))  # 36
plot(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3])))
# How many have no result for the fourth option?
sum(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4])
}))  # 24
# How many have no result for the fourth option?
sum(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4])
}))  # 18
plot(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4])
}))
sum(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4]) & is.na(x$logBF[5])
}))  # 14
plot(sapply(example_ddwindows$options, function(x) {
is.na(x$logBF[1]) & is.na(x$logBF[2]) & is.na(x$logBF[3]) & is.na(x$logBF[4]) & is.na(x$logBF[5])
}))
windows <- example_ddwindows$windows
windows <- example_ddwindows$windows
plot(x = windows$begin + (windows$end - windows$begin)/2,
y = windows$end - windows$begin, xlab = "time", ylab = "width")
windows <- example_ddwindows$windows
plot(x = windows$begin + (windows$end - windows$begin)/2,
y = windows$end - windows$begin, xlab = "time", ylab = "width", type = "l")
windows$t <- windows$begin + (windows$end - windows$begin)/2
points(x = windows$t[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], col = "red")
windows$width <- windows$end - windows$begin
points(x = windows$t[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], col = "red",
y = windows$width[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))])
points(x = windows$t[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], col = "red",
y = windows$width[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], pch = 19)
abline(v = c(36000/2, seq(57600, 431900, 43200)), lty = "dashed")
plot(x = windows$begin + (windows$end - windows$begin)/2,
y = windows$end - windows$begin, xlab = "time", ylab = "width", type = "l")
windows$t <- windows$begin + (windows$end - windows$begin)/2
windows$width <- windows$end - windows$begin
points(x = windows$t[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], col = "red",
y = windows$width[which(sapply(example_ddwindows$options, function(x) is.na(x$logBF[1])))], pch = 19)
abline(v = seq(36000, 421900, 43200), lty = "dashed")
abline(h = seq(1, 2, 6, 12)*60*60, lty = "dashed")
abline(h = c(1, 2, 6, 12)*60*60, lty = "dashed")
abline(h = c(1, 2, 6, 12)*60*60, lty = "solid")
data(edges)
library(lubridate)
days <- unique(day(edges$date))
hours <- unique(hour(edges$date))
days
hours
mat <- matrix(NA, nrow = length(hours), ncol = length(days))
rownames(mat) <- hours
colnames(mat) <- days
for(d in 1:length(days)) {
for(h in 1:length(hours)) {
mat[h,d] <- sum(day(edges$date) == days[d] & hour(edges$hour) == hours[h])
}
}
d <- 1
h <- 1
day(edges$date) == days[d]
sum(day(edges$date) == days[d] & hour(edges$hour) == hours[h])
for(d in 1:length(days)) {
for(h in 1:length(hours)) {
mat[h,d] <- sum(day(edges$date) == days[d] & hour(edges$date) == hours[h])
}
}
mat
windows
which(windows$t == 36000)
which(windows$t == 36600)
example_ddwindows$options[[29]]
example_ddwindows$options[[30]]
example_ddwindows$options[[31]]
example_ddwindows$options[[32]]
example_ddwindows$options[[33]]
example_ddwindows$options[[34]]
example_ddwindows$options[[35]]
example_ddwindows$options[[36]]
# 29
example_ddwindows$options[[29]]
# 29
option29 <- example_ddwindows$options[[29]]
apply(option29, 1, function(x) {
sum(edges$time > x[1] & edges$time < x[2])
})
option29$m2 <- apply(option29, 1, function(x) {
sum(edges$time > x[1] & edges$time < x[2])
})
option29
# 29
option29 <- example_ddwindows$options[[29]]
option29$m2 <- apply(option29, 1, function(x) {
sum(edges$time >= x[1] & edges$time < x[2])
})
option29
# 29
option29 <- example_ddwindows$options[[29]]
option29$m2 <- apply(option29, 1, function(x) {
sum(edges$time >= x[1] & edges$time <= x[2])
})
option29
option29$t <- option29$begin + (option29$end - option29$begin)/2
option29
head(edges[edges$time == 35400])
head(edges[edges$time == 35400,])
mat
37200-33600
33600 + (37200-33600)/3
sum(edges$time >= 33600 & edges$time <= 34800)
33600 + 2*(37200-33600)/3
sum(edges$time >= 34800 & edges$time <= 36000)
33600 + 3*(37200-33600)/3
sum(edges$time >= 36000 & edges$time <= 37200)
abline(v = seq(36000 + 43200/2, 421900, 43200), lty = 3)
rm(list=ls())
# loading libraries
library(remulate)
library(remify)
library(remstats)
library(remstimate)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
rEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01)
cEffects <- ~ remulate::inertia(-0.1) + remulate::reciprocity(0.03)
ao_reh <- remulate::remulateActor(rateEffects = rEffects,
choiceEffects = cEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 1423)
names(ao_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
ao_reh_proc <- remify::reh(edgelist = ao_reh$edgelist, model = "actor")
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
r_model <- ~ 1 + remstats::indegreeSender()
c_model <- ~ remstats::inertia() + remstats::reciprocity()
ao_reh_stats <- remstats::remstats(edgelist = ao_reh_proc, sender_effects = r_model, receiver_effects = c_model)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats,
method = "MLE",
model = "actor",
ncores = 3)
summary(ao_estimate)
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
library(remdata)
data(copenhagen)
edgelist <- copenhagen$edgelist
sms <- edgelist$sms
head(sms)
data(sms)
sms$edgelist
head(sms$edgelist[[1]])
dat <- read.delim("C:/Users/mlbosman/Downloads/comm-linux-kernel-reply/dat.edges", header=FALSE)
View(dat)
table(dat$V3)
actors <- sort(unique(c(dat$V1, dat$V2)))
freq <- sapply(actors, function(x) sum(dat$V1 == x | dat$V2 == x))
range(frew)
range(freq)
sum(freq > 5)
head(freq)
head(dat)
as.POSIXct(1138206644)
as.POSIXct(1138206644, origin = "1970-01-01")
tail(dat)
as.POSIXct(1385855235, origin = "1970-01-01")
dates <- tail(dat$V4)
as.POSIXct(dates, origin = "1970-01-01")
sdat <- tail(dat)
sdat$date <- as.POSIXct(dates, origin = "1970-01-01")
sdat
as.POSIXct(1084585996, origin = "1970-01-01")
as.POSIXct(1098798101, origin = "1970-01-01")
as.POSIXct(1080090715, origin = "1970-01-01")
as.POSIXct(1098769942, origin = "1970-01-01")
# loading libraries
library(remulate)
library(remify)
library(remstats)
library(remstimate)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
rEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01)
cEffects <- ~ remulate::inertia(-0.1) + remulate::reciprocity(0.03)
ao_reh <- remulate::remulateActor(rateEffects = rEffects,
choiceEffects = cEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 1423)
names(ao_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
ao_reh_proc <- remify::reh(edgelist = ao_reh$edgelist, model = "actor")
head(ao_reh_proc)
head(ao_reh_proc$edgelist)
summary(ao_reh_proc)
tail(ao_reh_proc$edgelist)
diff(aoh_reh_proc$edgelist$time)
diff(ao_reh_proc$edgelist$time)
diff(ao_reh_proc$edgelist[,1])
range(diff(ao_reh_proc$edgelist[,1]))
max(diff(ao_reh_proc$edgelist[,1]))
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
r_model <- ~ 1 + remstats::indegreeSender()
c_model <- ~ remstats::inertia() + remstats::reciprocity()
ao_reh_stats <- remstats::remstats(edgelist = ao_reh_proc, sender_effects = r_model, receiver_effects = c_model)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats,
method = "MLE",
model = "actor",
ncores = 3)
rm(list=ls())
# loading libraries
library(remulate)
library(remify)
library(remstats)
library(remstimate)
##################
##################
# Example 1: Actor-oriented model (MLE)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
rEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01)
cEffects <- ~ remulate::inertia(-0.1) + remulate::reciprocity(0.03)
ao_reh <- remulate::remulateActor(rateEffects = rEffects,
choiceEffects = cEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 1423)
names(ao_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
ao_reh_proc <- remify::reh(edgelist = ao_reh$edgelist, model = "actor")
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
r_model <- ~ 1 + remstats::indegreeSender()
c_model <- ~ remstats::inertia() + remstats::reciprocity()
ao_reh_stats <- remstats::remstats(edgelist = ao_reh_proc, sender_effects = r_model, receiver_effects = c_model)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats,
method = "MLE",
model = "actor",
ncores = 3)
summary(ao_estimate)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
tieEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01) + remulate::inertia(-0.1) + remulate::reciprocity(0.03)
tie_reh <- remulate::remulateTie(effects = tieEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 2423)
names(tie_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
tie_reh_proc <- remify::reh(edgelist = tie_reh$edgelist, model = "tie")
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
tie_model <- ~ 1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity()
tie_reh_stats <- remstats::remstats(edgelist = tie_reh_proc, tie_effects = tie_model)
# (3) estimate model with remstimate
tie_estimate <- remstimate::remstimate(reh = tie_reh_proc,
stats = tie_reh_stats,
method = "MLE",
model = "tie",
ncores = 3)
summary(tie_estimate)
tie_reh_proc
# (3) estimate model with remstimate
tie_estimate <- remstimate::remstimate(reh = tie_reh_proc,
stats = tie_reh_stats$statistics,
method = "MLE",
model = "tie",
ncores = 3)
# (3) estimate model with remstimate
tie_estimate <- remstimate::remstimate(reh = tie_reh_proc,
stats = tie_reh_stats$statistics,
method = "MLE",
model = "tie",
ncores = 1)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats$statistics,
method = "MLE",
model = "actor",
ncores = 1)
?remstimate
class(aoh_reh_stats)
ao_reh_stats <- remstats::remstats(edgelist = ao_reh_proc, sender_effects = r_model, receiver_effects = c_model)
class(ao_reh_stats )
class(ao_reh_stats)
devtools::install_github("TilburgNetworkGroup/remstats", auth_token = "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")
View(remstimate)
View(remstimate::remstimate)
View(remstimate::remstimate)
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
devtools::install_github("TilburgNetworkGroup/remstimate", auth_token = "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")
# loading libraries
library(remulate)
library(remify)
library(remstats)
library(remstimate)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
rEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01)
cEffects <- ~ remulate::inertia(-0.1) + remulate::reciprocity(0.03)
ao_reh <- remulate::remulateActor(rateEffects = rEffects,
choiceEffects = cEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 1423)
names(ao_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
ao_reh_proc <- remify::reh(edgelist = ao_reh$edgelist, model = "actor")
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
r_model <- ~ 1 + remstats::indegreeSender()
c_model <- ~ remstats::inertia() + remstats::reciprocity()
ao_reh_stats <- remstats::remstats(edgelist = ao_reh_proc, sender_effects = r_model, receiver_effects = c_model)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats,
method = "MLE",
model = "actor",
ncores = 3)
summary(ao_estimate)
# (3) estimate model with remstimate
ao_estimate <- remstimate::remstimate(reh = ao_reh_proc,
stats = ao_reh_stats,
method = "MLE",
model = "actor",
ncores = 1)
summary(ao_estimate)
# (1) generate network with remulate (use remulate:: namespace cause the names of the endogenous statistics are the same between remulate and remstats)
tieEffects <- ~ remulate::baseline(-5) + remulate::indegreeSender(0.01) + remulate::inertia(-0.1) + remulate::reciprocity(0.03)
tie_reh <- remulate::remulateTie(effects = tieEffects,
actors = 1:20,
time = 1e08,
events = 9000,
seed = 2423)
names(tie_reh$edgelist) <- c("time","actor1","actor2")
# (1.1) process the network with remify
tie_reh_proc <- remify::reh(edgelist = tie_reh$edgelist, model = "tie")
# (2) calculate statistics with remstats (use remstats:: namespae for the same reason at (1))
tie_model <- ~ 1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity()
tie_reh_stats <- remstats::remstats(edgelist = tie_reh_proc, tie_effects = tie_model)
# (3) estimate model with remstimate
tie_estimate <- remstimate::remstimate(reh = tie_reh_proc,
stats = tie_reh_stats,
method = "MLE",
model = "tie",
ncores = 3)
summary(tie_estimate)
# (3) estimate model with remstimate
tie_estimate <- remstimate::remstimate(reh = tie_reh_proc,
stats = tie_reh_stats,
method = "MLE",
model = "tie",
ncores = 1)
summary(tie_estimate)
#Load the packages
library(remulate)
library(remstats)
library(remify)
library(relevent)
#specify actor attributes
attributesObject <- data.frame(id=c("John","Mary","Carol","Leon","Amy","Max","Sara"), time=rep(0,7), gender=c(0,1,1,0,1,0,1), age=c(21,24,27,23,22,25,25) )
#view the attributes data.frame
attributesObject
#specify network effects and their coefficients to generate data with
effects.gen <- ~ remulate::baseline(-1) +
remulate::inertia(0.01) +
remulate::reciprocity(-0.04) +
remulate::same(0.2,variable="gender",attributes = attributesObject)
#list of actors
actors = c("John","Mary","Carol","Leon","Amy","Max","Sara")
#generate data with remulate
dataObject <- remulate::remulateTie(effects.gen , actors, time = 200, events = 2000)
#view the first few rows of an edgelist
head(dataObject$edgelist)
#specify effects to compute statistics on
#specify which statistics to compute
effects.stats <- ~ 1 +
remstats::inertia() +
remstats::reciprocity() +
remstats::same("gender") +
remstats::difference("age")
#help documentation for difference statistic
?remstats::difference
# Compute statistics
names(dataObject$edgelist) <- c("time","actor1","actor2")  #this is just a pre-processing step to get the correct column-names of the edgelist. Not very important
statsObject <- remstats::remstats(edgelist = dataObject$edgelist, tie_effects = effects.stats, attributes = attributesObject)
#view dimensions of stats output
dim(statsObject$statistics)
#view which actors are sender and receiver for the 4th index in the riskset data.frame
statsObject$riskset[4,]
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_ddfit.RData")
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_ddwindows.RData")
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_test.RData")
usethis::use_data(example_test, overwrite = TRUE)
usethis::use_data(example_ddwindows, overwrite = TRUE)
usethis::use_data(example_ddfit, overwrite = TRUE)
library(REHdynamics)
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_MW12.RData")
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_MW2.RData")
load("C:/Users/mlbosman/surfdrive/Documents/Projects/2. Network dynamics/example_MW6.RData")
usethis::use_data(example_MW2, overwrite = TRUE)
usethis::use_data(example_MW6, overwrite = TRUE)
usethis::use_data(example_MW12, overwrite = TRUE)
?example_MW2
?ddfit_mixed
library(REHdynamics)
?ddfit_mixed
?example_ddfit
data(example_ddfit)
str(example_ddfit)
length(example_ddfit)
?ddfit_mixed
load(example_ddwindows)
data(example_ddwindows)
head(example_ddwindows$windows)
example_ddwindows$windows$width <- with(example_ddwindows$windows, end-begin)
head(example_ddwindows$windows)
example_ddwindows$windows$t <- with(example_ddwindows$windows, begin + width/2)
head(example_ddwindows$windows)
usethis::use_data(example_ddwindows, overwrite = TRUE)
library(REHdynamics)
?example_MW2
data(example_test)
library(REHdynamics)
